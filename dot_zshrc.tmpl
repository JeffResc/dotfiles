# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# homebrew stuff
export HOMEBREW_PREFIX="/opt/homebrew"

# Ensure Homebrew completions are in fpath
if [[ -d "/opt/homebrew/share/zsh/site-functions" ]]; then
    fpath=("/opt/homebrew/share/zsh/site-functions" $fpath)
fi

# Initialize completion system
autoload -Uz compinit && compinit

# go, brew paths
export PATH="$HOME/.local/bin:$HOME/go/bin:$(brew --prefix rustup)/bin:$HOME/.cargo/bin:$HOMEBREW_PREFIX/bin:$PATH"

# nvm config
export NVM_DIR="$HOME/.nvm"
    [ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && \. "$(brew --prefix)/opt/nvm/nvm.sh" # This loads nvm
    [ -s "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion

# aliases
alias ls='lsd'
alias l='lsd'
alias cat='bat'
alias kctx='kubie ctx'

# kubecolor
alias kubectl='kubecolor'
compdef kubecolor=kubectl

# kube editor
export KUBE_EDITOR="$HOME/.local/bin/kube-edit.sh"

# fzf
source <(fzf --zsh)

# zoxide
if [ -z "$DISABLE_ZOXIDE" ]; then
  eval "$(zoxide init --cmd cd zsh)"
fi

# p10k
source $HOMEBREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme

# menu autocomplete
zstyle ':completion:*' menu select

# aliases
[ -f ~/.kubectl_aliases ] && source ~/.kubectl_aliases
[ -f ~/.uds_aliases ] && source ~/.uds_aliases

# krew
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

{{- if eq .class "personal" }}
export KUBECONFIG=~/.kube/talos_config
export TALOSCONFIG=~/.talos/talos_config
{{ end }}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# 1Password Account
export OP_ACCOUNT=$(op account ls --format=json | jq -r '.[0].user_uuid')
